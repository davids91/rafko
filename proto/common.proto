/*! This file is part of davids91/Rafko.
 *
 *    Rafko is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    Rafko is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with Rafko.  If not, see <https://www.gnu.org/licenses/> or
 *    <https://github.com/davids91/rafko/blob/master/LICENSE>
 */

syntax = "proto3";

package sparse_net_library;

/** @brief      Indexes of the transfer function a neuron is able to use
 *              on the weigthed sum of its operation
 */
enum transfer_functions{
  TRANSFER_FUNCTION_UNKNOWN = 0;
  TRANSFER_FUNCTION_IDENTITY = 1;
  TRANSFER_FUNCTION_SIGMOID = 2;
  TRANSFER_FUNCTION_TANH = 3;
  TRANSFER_FUNCTION_ELU = 4;
  TRANSFER_FUNCTION_SELU = 5;
  TRANSFER_FUNCTION_RELU = 6;
  TRANSFER_FUNCTION_END = 512;
}

/** @brief      Indexes of the error functions a Neural Network is able to use
 *              to calculate the gradient of the weights
 */
enum cost_functions{
  COST_FUNCTION_UNKNOWN = 0;
  COST_FUNCTION_SQUARED_ERROR = 1; /* ( (expected-calculated)^2 ) */
  COST_FUNCTION_MSE = 2; /* ( 0.5*(expected-calculated)^2 )/dataset_size */
}

/** @brief      Describes the available weight updaters implemented in the framework
 */
enum weight_updaters{
  WEIGHT_UPDATER_UNKNOWN = 0;
  WEIGHT_UPDATER_DEFAULT = 1;
  WEIGHT_UPDATER_MOMENTUM = 2;
  WEIGHT_UPDATER_NESTEROV = 3;
}

/** @brief      Describes a data-set to train or test Neural Networks
 *              The input and label arrays contain @input_size and @feature_size floating point numbers
 *              respectively, repeated after one another.
 *              In case of sequential data, label-input pairs of @sequence_size are considered one sequence.
 *              By desgin the number of  @labels should  be a multiple of @sequence_size * @feature_size.
 */
message Data_set{
  uint32 input_size = 1;
  uint32 feature_size = 2;
  uint32 sequence_size = 3;
  repeated double inputs = 10;
  repeated double labels = 11;
}

/**
 * @brief      This class describes a synapse. A synapse corresponds with a table of intervals.
 *             The number of @starts and @sizes should always be equal. Each pair of them describes
 *             an index interval where @starts[x] states where the interval x is starting, and @sizes[x]
 *             denotes the number of indices present in taht interval. The intervals are free to overlap
 *             or coincide.
 *             The element @starts can be of negative number. The sign of it denotes a different kind of iteration
 *             on the given interval. In case the sign is negative for that element, the interval it describes grows
 *             in the negative direction. This way two kinds of intervals can be stored in the same synapse.
 *             Positive interval starts at 0, goes on indefinitely: [0,+inf]
 *             -Positive intervals usually denote enclosed relationships (e.g.: internal neurons in a @Partial_solution)
 *             Negative interval starts at -1, goes backwards indefinitely: [-1,-inf]
 *             - Negative intervals usually denote external relationships (e.g.: input data of the Neurons in the @Net
 *               or inputs of an Inner Neuron, taken from the @Partial_solution input synapses )
 *             In the class @Synapse_iterator there are methods to map negative intervals into positive array numbers.
 *             The -1 becomes index 0, -2 ==> 1 and so on... This is needed to be able to use negative intervals as
 *             indexes in arrays.
 */
message Synapse_interval{
  sint32 starts = 10; /* Starting indexes of intervals */
  uint32 interval_size = 11; /* Sizes of intervals */
}
