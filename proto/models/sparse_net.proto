syntax = "proto3";
option cc_enable_arenas = true;

package sparse_net_library;

import "common.proto";

/** @brief      Takes input, assignes weights to them and processes
 *              the weigthed sums with a bias, transfer function and a memory ratio.
 */
message Neuron{
  uint32 bias_idx = 1; /* a value the Neuron shall offset its output with */
  /* index of the weight for the memory ratio. 1.0: keep its previous value instead of the newly calculated one */
  uint32 memory_filter_idx = 2;  /* Value pointed at should always be 0.0 <= memory_filter < 1.0 default value is 0.0 <== as in zero memory of its previous value */
  transfer_functions transfer_function_idx = 3; /* index of the transfer funtion this Neuron uses, empty is invalid */

  /**
   * Input weights shall only contain positive intervals, 
   * each interval corresponding to an index in the @weight_table in the @SparseNet
   */
  repeated Synapse_interval input_weights = 4;

  /**
   * Input indices describes intervals denoting the neurons inputs. 
   * Each positive interval corresponds to indices in the internal data of a @Neuron stored in the @Solution_solver
   * Each negative interval corresponds to indices in the input data given to the @Solution_solver
   */
  repeated Synapse_interval input_indices = 5;
}

/** @brief      A sparse net implementation containing the
 *              Neurons and optimization cache files
 */
message SparseNet{
  uint32 input_data_size = 1; /* Number of inputs (floating point numbers) accepted by the Neural network */
  uint32 output_neuron_number = 3; /* Number of outputs the Neural network has */
  repeated Neuron neuron_array = 4; /* Array of Neurons the network has */
  repeated double weight_table = 5; /* Stores induvidual weights used by the Neurons */
}
