#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;
uniform float my_seed;
varying vec2 v_texCoords;

uniform float underPopThr;
uniform float overPopThr;

uniform sampler2D previous_pixels;
uniform sampler2D current_pixels;
vec2 board_size = textureSize(current_pixels,0);

vec4 color_at(vec2 position){
 vec2 uv = (vec2(position.x, position.y)) / board_size;
 return texture(current_pixels, uv);
}

vec4 prev_color_at(vec2 position){
 vec2 uv = (vec2(position.x, position.y)) / board_size;
 return texture(previous_pixels, uv);
}

float rand(vec2 co){
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void main(){
	if((board_size.x < gl_FragCoord.x)||(board_size.y < gl_FragCoord.y)){
	  gl_FragColor = vec4(0.0,0.0,0.0,1.0); /* The void surrounds all of us */
	}else{
	  vec4 current_color;
    float proxR = 0; float proxG = 0; float proxB = 0;
    int numR = 0; int numG = 0; int numB = 0;
    int numDeadR = 0; int numDeadG = 0; int numDeadB = 0;
    int numFullR = 0; int numFullG = 0; int numFullB = 0;
    float r = color_at(vec2(gl_FragCoord)).r; float g = color_at(vec2(gl_FragCoord)).g; float b = color_at(vec2(gl_FragCoord)).b;
    float prevR = prev_color_at(vec2(gl_FragCoord)).r; float prevG = prev_color_at(vec2(gl_FragCoord)).g; float prevB = prev_color_at(vec2(gl_FragCoord)).b;

     for(int inItX = -1; inItX <= 1; ++inItX){
        for(int inItY = -1; inItY <= 1; ++inItY){
          if((inItX != gl_FragCoord.x)&&(inItY != gl_FragCoord.y)){
            current_color = color_at(vec2(
              min(board_size.x,max(0,gl_FragCoord.x + inItX)),
              min(board_size.y,max(0,gl_FragCoord.y + inItY))
            ));
            if(0 < current_color.r){
              ++numR;
              if(1.0 == current_color.r)++numFullR;
            }else ++numDeadR;
            proxR += current_color.r;

            if(0 < current_color.g){
              ++numG;
              if(1.0 == current_color.g)++numFullG;
            }else ++numDeadG;
            proxG += current_color.g;

            if(0 < current_color.b){
              ++numB;
              if(1.0 == current_color.b)++numFullB;
            }else ++numDeadB;
            proxB += current_color.b;
          }
        }
    }

    if((underPopThr > proxR)||(overPopThr < proxR))r = 0; /* under + overpopulation */
    else if((underPopThr <= proxR)&&(overPopThr >= proxR))r = proxR / ((underPopThr+overPopThr)/2.0); /* re-production */
    else r = 0;

    if((underPopThr > proxG)||(overPopThr < proxG))g = 0; /* under + overpopulation */
    else if((underPopThr <= proxG)&&(overPopThr >= proxG))g =  proxG / ((underPopThr+overPopThr)/2.0); /* re-production */
    else g = 0;

    if((underPopThr > proxB)||(overPopThr < proxB))b = 0; /* under + overpopulation */
    else if((underPopThr <= proxB)&&(overPopThr >= proxB))b = proxB / ((underPopThr+overPopThr)/2.0); /* re-production */
    else b = 0;

    $CUSTOM_RULE$

    gl_FragColor = vec4(min(1.0, r),min(1.0, g),min(1.0, b),1.0);
	}
}