/*! This file is part of davids91/Rafko.
 *
 *    Rafko is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    Rafko is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with Rafko.  If not, see <https://www.gnu.org/licenses/> or
 *    <https://github.com/davids91/rafko/blob/master/LICENSE>
 */

syntax = "proto3";
option cc_enable_arenas = true;
option java_package = "org.rafko.rafko_net";
option java_outer_classname = "RafkoTraining";

package rafko_net;

import "common.proto";


/** @brief      Different configurable strategies while training
 */
enum Training_strategy{
  TRAINING_STRATEGY_UNKNOWN = 0;
  TRAINING_STRATEGY_EARLY_STOPPING = 1; /* Stop the training when training eror diverges from test error */
  TRAINING_STRATEGY_LEARNING_RATE_SCHEDULE = 2;
  TRAINING_STRATEGY_STOCHASTIC_MINING_SCHEDULE = 4;
  TRAINING_STRATEGY_STOP_WHEN_TRAINING_ERROR_BELOW_LEARNING_RATE = 4096;
  TRAINING_STRATEGY_STOP_WHEN_TRAINING_ERROR_ZERO = 8192;
  TRAINING_STRATEGY_END = 1048576;
}

/** @brief      Describes a data-set to train or test Neural Networks
 *              The input and label arrays contain @input_size and @feature_size floating point numbers
 *              respectively, repeated after one another.
 *              In case of sequential data, label-input pairs of @sequence_size are considered one sequence.
 *              By desgin the number of  @labels should  be a multiple of @sequence_size * @feature_size.
 */
message Data_set{
  uint32 input_size = 1;
  uint32 feature_size = 2;
  uint32 sequence_size = 3;
  repeated double inputs = 10;
  repeated double labels = 11;
}

/**
 * @brief      Neuron indices who can be calcuated in paralell to one another
 *             while calculating backpropagation.
 *             @cols stores the number of synapses present in a queue element.
 *             Queue elements can be done one after another only.
 */
message Backpropagation_queue{
  repeated uint32 cols = 1; /* Number of neurons to be calculated at once */
  repeated Index_synapse_interval neuron_synapses = 2; /* Neuron indices encapsulating the whole network */
}

/**
 * @brief      An incomplete update value to the vector of a @SparseNet.
 *             A fragment shall contain some gradient values to update a corresponding
 *             network. A fragment can be calculated from a host, then it can be used to
 *             update or partially update a network.
 */
message Gradient_fragment{
  repeated double values = 3; /* Weight update values inside the fragment. The values follow one another in the order they appear based on the @weight_synapses member */
  repeated Index_synapse_interval weight_synapses = 2; /* The indices of the weights ( in the @SparseNet ) for the values stored in the fragment */
}
