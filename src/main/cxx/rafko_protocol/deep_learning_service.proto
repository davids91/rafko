/*! This file is part of davids91/Rafko.
 *
 *    Rafko is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    Rafko is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with Rafko.  If not, see <https://www.gnu.org/licenses/> or
 *    <https://github.com/davids91/rafko/blob/master/LICENSE>
 */

syntax = "proto3";
option cc_enable_arenas = true;
option java_package = "org.rafko.mainframe";
option java_outer_classname = "RafkoDeepLearningService";
package rafko_mainframe;

import "rafko_net.proto";
import "training.proto";

/** @brief      A service consists of slots on which different Neural related tasks can run.
 *              The differetn kinds of tasks are contained in the enum @Slot_type
 */
enum Slot_type{
  serv_slot_unknown = 0;
  serv_slot_to_run = 1; /* Simply runs a network, provides output on demand. Ignores @data_set and @test_set in @ServiceSlot */
  serv_slot_to_optimize = 2; /* Approximizes the attached network in it's loop based on an approximation of its gradient from the provided data sets */
}

/** @brief      A service slot can have different states, all of which are contained in the below enum.
 *              The states shall be summarized in a unit32 field as a bitstring, except when everything is okay,
 *              in which case the value shall be serv_slot_ok
 */
enum Slot_state_values{
  serv_slot_state_unknown = 0;
  serv_slot_missing_net = 1; /* Missing or empty Neural network attached to the Server slot */
  serv_slot_missing_solution = 2; /* Despite Network state, a Solution was not built based on the attached network ( if any ) */
  serv_slot_missing_data_set = 4;
  serv_slot_missing_cost_function = 16;
  serv_slot_missing_trainer = 32;
  serv_slot_ok = 65536;
}

/** @brief      Available actions to request from a service slot
 */
enum Slot_action_field{
  serv_slot_noop = 0;
  serv_slot_to_start = 1; /* This action makes the server call the @loop of the @target_slot_id every time its @loop is called */
  serv_slot_to_stop = 2; /* This action disables the behavior introduced by @serv_slot_to_start */
  serv_slot_to_reset = 4; /* Depending on the slot, it could reset the attached networks data, the test/training error scores or whatever is implemented in the slot's @reset function */
  serv_slot_to_takeover_net = 8; /* Takes a copy from the source slot, and overwrites the network in the target slot in it */
  serv_slot_to_takeover_training_set = 16; /* Adds the provided data_stream as an element of the training set attached to the server slot */
  serv_slot_to_append_test_set = 32; /* Adds the provided data_stream as an element of the test set attached to the server slot */
  serv_slot_to_distill_network = 64; /* For the network attached to the slot: removes the zero, or insignificantly small weights with connections. */
  /*!Note: The removal/duplication threshold is based on the @beta parameter in the service hyperparameters */
  serv_slot_to_amplify_network = 128; /* For the network attached to the slot: duplicates the significant neurons. */
  /*!Note: A neuron proves to be significant if the output of it is paired with greater weights, than other neurons.*/
  serv_slot_to_run_once = 256; /* Run network one time. Uses the attached @data_stream of the request */
  serv_slot_to_get_training_sample = 512; /* Provides a training sample[@request_index] from the training set attached to the target slot: first, the input, then the label packed together */
  serv_slot_to_get_test_sample = 1024; /* Provides a training sample[@request_index] from the training set attached to the target slot: first, the input, then the label packed together */
  serv_slot_to_refresh_solution = 2048; /* Re-generates the solution attached to the server slot based on the attached network */
  serv_slot_to_die = 65536;
}

/** @brief      Available information fields to query from a service slot. The data is given back in the order of the enumerations
 *              e.g.: in case the info (slot_info_training_error & SLOT_INFO_TEST_SET_SEQUENCE_NUMBER) is be queried,
 *                    slot_info_training_error is be under index 1
 *                    SLOT_INFO_TEST_SET_SEQUENCE_NUMBER shall be under index 2
 *              e.g.: in case the info (SLOT_INFO_TEST_SET_SAMPLE_NUMBER & SLOT_INFO_TRAINING_SET_SAMPLE_NUMBER) is queried
 *                    SLOT_INFO_TRAINING_SET_SAMPLE_NUMBER is be under index 1
 *                    SLOT_INFO_TEST_SET_SAMPLE_NUMBER shall be under index 2
 */
enum Slot_info_field{
  slot_info_unknown = 0;
  slot_info_iteration = 1;
  slot_info_training_error = 32;
  slot_info_training_set_sequence_count = 64;
  /*!Note: values related to training set can go up to 512 */
  slot_info_test_error = 1024;
  slot_info_test_set_sequence_count = 2048;
  /*!Note: values related to test set can go up to 16384 */
}

/** @brief      Certain slots may require raw I/O data form the network to operate.
 *              The message @NeuralIOStream provides either Neural network input data
 *              or output data, depending on the recipient. One sample of the packet shall
 *              arrive in the order they are defined here. i.e.: first the input, then the labels,
 *              then the features. COmponents might be left empty, in which case the corresponding
 *              descriptor shall remain empty.
 */
message NeuralIOStream{
  /* +++ Size components +++ */
  uint32 sequence_size = 1; /* Number of feature sequenced arrays in a package; sequence lengths for each types of data are set below */
  uint32 input_size = 2; /* Number of floating point numbers that a Neuron network takes as input */
  uint32 label_size = 3; /* Number of floating point numbers that a test or training set stores */
  uint32 feature_size = 4; /* Number of floating point numbers that a Neuron network produced */
  /* --- Size components --- */
  repeated double package = 10; /* The packed data */
}

/** @brief      The meaasge to ask requests from the server. @action, @data_stream may be left blank.
 */
message SlotRequest{
  string source_slot_id = 1; /* In case of action requests involving 2 service slots, this field shall be used as the source slot */
  string target_slot_id = 2; /* In case of action requests involving only one slot this field shall be used */
  uint32 request_index = 10; /* In case of datasets, the index of the data sample */
  uint32 request_bitstring = 11; /* Either an action or an info request */
  NeuralIOStream data_stream = 20; /* May be a part of a data-set or a run-once request */
}

/** @brief      Provides the parameters for the rpc @build_network in the service @RafkoDeepLearning
 *              This message is a utility for a rpc which is planned to be in the service temporarily.
 */
message BuildNetworkRequest{
  string target_slot_id = 2;
  uint32 input_size = 10;
  double expected_input_range = 11;
  repeated rafko_net.Transfer_functions allowed_transfers_by_layer = 14;
  repeated uint32 layer_sizes = 15;
}

/** @brief      Requests to a server reply with the following response package. Some fields may
 *              be left blank.
 */
message SlotResponse{
  string slot_id = 1; /* A string id to query existing service slots by */
  uint32 slot_state = 10; /* a bitfield representing the status of the slot */
  NeuralIOStream data_stream = 30; /* May be a part of a data-set or a run-once request */
}

/**
 * @brief      This class describes a packet of slot information.
 */
message SlotInfo{
  repeated Slot_info_field info_field = 10;
  repeated double info_package = 11;
}

/**
 * @brief      Service hyperparameters describe the context in which deep learning services
 *             operate. It contains all the neccessary set of variables to function in the
 *             context of deep learning. System relevant parameters like the number of working threads
 *             are decided from the server configuration.
 */
message ServiceHyperparameters{
  double learning_rate = 10;
  uint32 minibatch_size = 11;
  uint32 memory_truncation = 12;
  rafko_gym.Training_strategy training_strategies = 13;

  double alpha = 20;
  double beta = 21;
  double gamma = 22;
  double delta = 23;
  double epsilon = 24; /* very small positive value almost greater, than zero */
  double zetta = 25; /* Commonly used for oscillation dampening purposes */
  double lambda = 31;
  double beta_2 = 45; /* a second alphabet shall be started for algorithms requiring two variants of parameters */
};

/** @brief      The structure of a service slot encapsulating a channel in which deep learning related requests
 *              can be run.
 */
message ServiceSlot{
  string slot_id = 1; /* A unique identifier for each service slot */
  uint32 state = 2; /* A bitfield storing 0 or 1 at the positions given in enum @Slot_state_values, except when everything is fine, then the value @serv_slot_ok is used */
  Slot_type type = 10; /* Must be set on client side */

  ServiceHyperparameters hypers = 21;
  rafko_net.RafkoNet network = 22;
  rafko_gym.DataSet test_set = 23;
  rafko_gym.DataSet training_set = 24;
  rafko_net.Cost_functions cost_function = 25;
  rafko_gym.Weight_updaters weight_updater = 26;
}

/**
 * @brief      Describes a Rafko Deep Learning Service
 */
service RafkoDeepLearning{
  rpc add_slot(ServiceSlot) returns (SlotResponse) {} /* If possible adds a new slot into the server, then returns the status and ID of it */
  rpc update_slot(ServiceSlot) returns (SlotResponse) {} /* Modify existing slot; the ID must be provided */

  rpc ping(SlotRequest) returns (SlotResponse) {} /* Pings a slot, the response repeats the slot id and state if valid */
  rpc build_network(BuildNetworkRequest) returns (SlotResponse) {} /* Builds a Neural network with the given parameters into the provided slot */
  rpc request_action(stream SlotRequest) returns (stream SlotResponse) {} /* Make requests for the target service_slot, and return with the status after each request is completed */
  rpc get_info(SlotRequest) returns (SlotInfo) {}
  rpc get_network(SlotRequest) returns (rafko_net.RafkoNet) {} /* Provides the Loaded network into the slot */
}
