// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace sparse_net_library {
class Synapse_interval;
class Synapse_intervalDefaultTypeInternal;
extern Synapse_intervalDefaultTypeInternal _Synapse_interval_default_instance_;
}  // namespace sparse_net_library
PROTOBUF_NAMESPACE_OPEN
template<> ::sparse_net_library::Synapse_interval* Arena::CreateMaybeMessage<::sparse_net_library::Synapse_interval>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sparse_net_library {

enum transfer_functions : int {
  TRANSFER_FUNCTION_UNKNOWN = 0,
  TRANSFER_FUNCTION_IDENTITY = 1,
  TRANSFER_FUNCTION_SIGMOID = 2,
  TRANSFER_FUNCTION_TANH = 3,
  TRANSFER_FUNCTION_ELU = 4,
  TRANSFER_FUNCTION_SELU = 5,
  TRANSFER_FUNCTION_RELU = 6,
  TRANSFER_FUNCTION_END = 512,
  transfer_functions_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  transfer_functions_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool transfer_functions_IsValid(int value);
constexpr transfer_functions transfer_functions_MIN = TRANSFER_FUNCTION_UNKNOWN;
constexpr transfer_functions transfer_functions_MAX = TRANSFER_FUNCTION_END;
constexpr int transfer_functions_ARRAYSIZE = transfer_functions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* transfer_functions_descriptor();
template<typename T>
inline const std::string& transfer_functions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, transfer_functions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function transfer_functions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    transfer_functions_descriptor(), enum_t_value);
}
inline bool transfer_functions_Parse(
    const std::string& name, transfer_functions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<transfer_functions>(
    transfer_functions_descriptor(), name, value);
}
// ===================================================================

class Synapse_interval :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sparse_net_library.Synapse_interval) */ {
 public:
  Synapse_interval();
  virtual ~Synapse_interval();

  Synapse_interval(const Synapse_interval& from);
  Synapse_interval(Synapse_interval&& from) noexcept
    : Synapse_interval() {
    *this = ::std::move(from);
  }

  inline Synapse_interval& operator=(const Synapse_interval& from) {
    CopyFrom(from);
    return *this;
  }
  inline Synapse_interval& operator=(Synapse_interval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Synapse_interval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Synapse_interval* internal_default_instance() {
    return reinterpret_cast<const Synapse_interval*>(
               &_Synapse_interval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Synapse_interval& a, Synapse_interval& b) {
    a.Swap(&b);
  }
  inline void Swap(Synapse_interval* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Synapse_interval* New() const final {
    return CreateMaybeMessage<Synapse_interval>(nullptr);
  }

  Synapse_interval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Synapse_interval>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Synapse_interval& from);
  void MergeFrom(const Synapse_interval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Synapse_interval* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sparse_net_library.Synapse_interval";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartsFieldNumber = 10,
    kIntervalSizeFieldNumber = 11,
  };
  // sint32 starts = 10;
  void clear_starts();
  ::PROTOBUF_NAMESPACE_ID::int32 starts() const;
  void set_starts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 interval_size = 11;
  void clear_interval_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_size() const;
  void set_interval_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:sparse_net_library.Synapse_interval)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 starts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Synapse_interval

// sint32 starts = 10;
inline void Synapse_interval::clear_starts() {
  starts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Synapse_interval::starts() const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Synapse_interval.starts)
  return starts_;
}
inline void Synapse_interval::set_starts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starts_ = value;
  // @@protoc_insertion_point(field_set:sparse_net_library.Synapse_interval.starts)
}

// uint32 interval_size = 11;
inline void Synapse_interval::clear_interval_size() {
  interval_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Synapse_interval::interval_size() const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Synapse_interval.interval_size)
  return interval_size_;
}
inline void Synapse_interval::set_interval_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  interval_size_ = value;
  // @@protoc_insertion_point(field_set:sparse_net_library.Synapse_interval.interval_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sparse_net_library

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sparse_net_library::transfer_functions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sparse_net_library::transfer_functions>() {
  return ::sparse_net_library::transfer_functions_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
