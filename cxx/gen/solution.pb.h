// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: solution.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_solution_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_solution_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_solution_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_solution_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_solution_2eproto;
namespace sparse_net_library {
class Partial_solution;
class Partial_solutionDefaultTypeInternal;
extern Partial_solutionDefaultTypeInternal _Partial_solution_default_instance_;
class Solution;
class SolutionDefaultTypeInternal;
extern SolutionDefaultTypeInternal _Solution_default_instance_;
}  // namespace sparse_net_library
PROTOBUF_NAMESPACE_OPEN
template<> ::sparse_net_library::Partial_solution* Arena::CreateMaybeMessage<::sparse_net_library::Partial_solution>(Arena*);
template<> ::sparse_net_library::Solution* Arena::CreateMaybeMessage<::sparse_net_library::Solution>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sparse_net_library {

// ===================================================================

class Partial_solution :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sparse_net_library.Partial_solution) */ {
 public:
  Partial_solution();
  virtual ~Partial_solution();

  Partial_solution(const Partial_solution& from);
  Partial_solution(Partial_solution&& from) noexcept
    : Partial_solution() {
    *this = ::std::move(from);
  }

  inline Partial_solution& operator=(const Partial_solution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Partial_solution& operator=(Partial_solution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Partial_solution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Partial_solution* internal_default_instance() {
    return reinterpret_cast<const Partial_solution*>(
               &_Partial_solution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Partial_solution& a, Partial_solution& b) {
    a.Swap(&b);
  }
  inline void Swap(Partial_solution* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Partial_solution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Partial_solution* New() const final {
    return CreateMaybeMessage<Partial_solution>(nullptr);
  }

  Partial_solution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Partial_solution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Partial_solution& from);
  void MergeFrom(const Partial_solution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Partial_solution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sparse_net_library.Partial_solution";
  }
  protected:
  explicit Partial_solution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_solution_2eproto);
    return ::descriptor_table_solution_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightTableFieldNumber = 2,
    kInputDataFieldNumber = 3,
    kOutputDataFieldNumber = 4,
    kActualIndexFieldNumber = 10,
    kNeuronTransferFunctionsFieldNumber = 11,
    kMemoryRatioIndexFieldNumber = 12,
    kBiasIndexFieldNumber = 13,
    kIndexSynapseNumberFieldNumber = 14,
    kWeightSynapseNumberFieldNumber = 15,
    kInsideIndicesFieldNumber = 20,
    kWeightIndicesFieldNumber = 30,
    kInternalNeuronNumberFieldNumber = 1,
  };
  // repeated double weight_table = 2;
  int weight_table_size() const;
  void clear_weight_table();
  double weight_table(int index) const;
  void set_weight_table(int index, double value);
  void add_weight_table(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      weight_table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_weight_table();

  // repeated .sparse_net_library.Synapse_interval input_data = 3;
  int input_data_size() const;
  void clear_input_data();
  ::sparse_net_library::Synapse_interval* mutable_input_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >*
      mutable_input_data();
  const ::sparse_net_library::Synapse_interval& input_data(int index) const;
  ::sparse_net_library::Synapse_interval* add_input_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >&
      input_data() const;

  // repeated .sparse_net_library.Synapse_interval output_data = 4;
  int output_data_size() const;
  void clear_output_data();
  ::sparse_net_library::Synapse_interval* mutable_output_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >*
      mutable_output_data();
  const ::sparse_net_library::Synapse_interval& output_data(int index) const;
  ::sparse_net_library::Synapse_interval* add_output_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >&
      output_data() const;

  // repeated uint32 actual_index = 10;
  int actual_index_size() const;
  void clear_actual_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 actual_index(int index) const;
  void set_actual_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_actual_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      actual_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_actual_index();

  // repeated .sparse_net_library.transfer_functions neuron_transfer_functions = 11;
  int neuron_transfer_functions_size() const;
  void clear_neuron_transfer_functions();
  ::sparse_net_library::transfer_functions neuron_transfer_functions(int index) const;
  void set_neuron_transfer_functions(int index, ::sparse_net_library::transfer_functions value);
  void add_neuron_transfer_functions(::sparse_net_library::transfer_functions value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& neuron_transfer_functions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_neuron_transfer_functions();

  // repeated double memory_ratio_index = 12;
  int memory_ratio_index_size() const;
  void clear_memory_ratio_index();
  double memory_ratio_index(int index) const;
  void set_memory_ratio_index(int index, double value);
  void add_memory_ratio_index(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      memory_ratio_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_memory_ratio_index();

  // repeated double bias_index = 13;
  int bias_index_size() const;
  void clear_bias_index();
  double bias_index(int index) const;
  void set_bias_index(int index, double value);
  void add_bias_index(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      bias_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_bias_index();

  // repeated uint32 index_synapse_number = 14;
  int index_synapse_number_size() const;
  void clear_index_synapse_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 index_synapse_number(int index) const;
  void set_index_synapse_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_index_synapse_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      index_synapse_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_index_synapse_number();

  // repeated uint32 weight_synapse_number = 15;
  int weight_synapse_number_size() const;
  void clear_weight_synapse_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_synapse_number(int index) const;
  void set_weight_synapse_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_weight_synapse_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      weight_synapse_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_weight_synapse_number();

  // repeated .sparse_net_library.Synapse_interval inside_indices = 20;
  int inside_indices_size() const;
  void clear_inside_indices();
  ::sparse_net_library::Synapse_interval* mutable_inside_indices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >*
      mutable_inside_indices();
  const ::sparse_net_library::Synapse_interval& inside_indices(int index) const;
  ::sparse_net_library::Synapse_interval* add_inside_indices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >&
      inside_indices() const;

  // repeated .sparse_net_library.Synapse_interval weight_indices = 30;
  int weight_indices_size() const;
  void clear_weight_indices();
  ::sparse_net_library::Synapse_interval* mutable_weight_indices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >*
      mutable_weight_indices();
  const ::sparse_net_library::Synapse_interval& weight_indices(int index) const;
  ::sparse_net_library::Synapse_interval* add_weight_indices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >&
      weight_indices() const;

  // uint32 internal_neuron_number = 1;
  void clear_internal_neuron_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_neuron_number() const;
  void set_internal_neuron_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:sparse_net_library.Partial_solution)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > weight_table_;
  mutable std::atomic<int> _weight_table_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval > input_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval > output_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > actual_index_;
  mutable std::atomic<int> _actual_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> neuron_transfer_functions_;
  mutable std::atomic<int> _neuron_transfer_functions_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > memory_ratio_index_;
  mutable std::atomic<int> _memory_ratio_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > bias_index_;
  mutable std::atomic<int> _bias_index_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > index_synapse_number_;
  mutable std::atomic<int> _index_synapse_number_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > weight_synapse_number_;
  mutable std::atomic<int> _weight_synapse_number_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval > inside_indices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval > weight_indices_;
  ::PROTOBUF_NAMESPACE_ID::uint32 internal_neuron_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solution_2eproto;
};
// -------------------------------------------------------------------

class Solution :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sparse_net_library.Solution) */ {
 public:
  Solution();
  virtual ~Solution();

  Solution(const Solution& from);
  Solution(Solution&& from) noexcept
    : Solution() {
    *this = ::std::move(from);
  }

  inline Solution& operator=(const Solution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Solution& operator=(Solution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Solution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Solution* internal_default_instance() {
    return reinterpret_cast<const Solution*>(
               &_Solution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Solution& a, Solution& b) {
    a.Swap(&b);
  }
  inline void Swap(Solution* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Solution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Solution* New() const final {
    return CreateMaybeMessage<Solution>(nullptr);
  }

  Solution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Solution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Solution& from);
  void MergeFrom(const Solution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Solution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sparse_net_library.Solution";
  }
  protected:
  explicit Solution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_solution_2eproto);
    return ::descriptor_table_solution_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColsFieldNumber = 10,
    kPartialSolutionsFieldNumber = 11,
    kNeuronNumberFieldNumber = 1,
    kOutputNeuronNumberFieldNumber = 2,
  };
  // repeated uint32 cols = 10;
  int cols_size() const;
  void clear_cols();
  ::PROTOBUF_NAMESPACE_ID::uint32 cols(int index) const;
  void set_cols(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_cols(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      cols() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_cols();

  // repeated .sparse_net_library.Partial_solution partial_solutions = 11;
  int partial_solutions_size() const;
  void clear_partial_solutions();
  ::sparse_net_library::Partial_solution* mutable_partial_solutions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Partial_solution >*
      mutable_partial_solutions();
  const ::sparse_net_library::Partial_solution& partial_solutions(int index) const;
  ::sparse_net_library::Partial_solution* add_partial_solutions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Partial_solution >&
      partial_solutions() const;

  // uint32 neuron_number = 1;
  void clear_neuron_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 neuron_number() const;
  void set_neuron_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 output_neuron_number = 2;
  void clear_output_neuron_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 output_neuron_number() const;
  void set_output_neuron_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:sparse_net_library.Solution)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > cols_;
  mutable std::atomic<int> _cols_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Partial_solution > partial_solutions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 neuron_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_neuron_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_solution_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Partial_solution

// uint32 internal_neuron_number = 1;
inline void Partial_solution::clear_internal_neuron_number() {
  internal_neuron_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Partial_solution::internal_neuron_number() const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.internal_neuron_number)
  return internal_neuron_number_;
}
inline void Partial_solution::set_internal_neuron_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  internal_neuron_number_ = value;
  // @@protoc_insertion_point(field_set:sparse_net_library.Partial_solution.internal_neuron_number)
}

// repeated double weight_table = 2;
inline int Partial_solution::weight_table_size() const {
  return weight_table_.size();
}
inline void Partial_solution::clear_weight_table() {
  weight_table_.Clear();
}
inline double Partial_solution::weight_table(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.weight_table)
  return weight_table_.Get(index);
}
inline void Partial_solution::set_weight_table(int index, double value) {
  weight_table_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Partial_solution.weight_table)
}
inline void Partial_solution::add_weight_table(double value) {
  weight_table_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Partial_solution.weight_table)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Partial_solution::weight_table() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Partial_solution.weight_table)
  return weight_table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Partial_solution::mutable_weight_table() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Partial_solution.weight_table)
  return &weight_table_;
}

// repeated .sparse_net_library.Synapse_interval input_data = 3;
inline int Partial_solution::input_data_size() const {
  return input_data_.size();
}
inline ::sparse_net_library::Synapse_interval* Partial_solution::mutable_input_data(int index) {
  // @@protoc_insertion_point(field_mutable:sparse_net_library.Partial_solution.input_data)
  return input_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >*
Partial_solution::mutable_input_data() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Partial_solution.input_data)
  return &input_data_;
}
inline const ::sparse_net_library::Synapse_interval& Partial_solution::input_data(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.input_data)
  return input_data_.Get(index);
}
inline ::sparse_net_library::Synapse_interval* Partial_solution::add_input_data() {
  // @@protoc_insertion_point(field_add:sparse_net_library.Partial_solution.input_data)
  return input_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >&
Partial_solution::input_data() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Partial_solution.input_data)
  return input_data_;
}

// repeated .sparse_net_library.Synapse_interval output_data = 4;
inline int Partial_solution::output_data_size() const {
  return output_data_.size();
}
inline ::sparse_net_library::Synapse_interval* Partial_solution::mutable_output_data(int index) {
  // @@protoc_insertion_point(field_mutable:sparse_net_library.Partial_solution.output_data)
  return output_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >*
Partial_solution::mutable_output_data() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Partial_solution.output_data)
  return &output_data_;
}
inline const ::sparse_net_library::Synapse_interval& Partial_solution::output_data(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.output_data)
  return output_data_.Get(index);
}
inline ::sparse_net_library::Synapse_interval* Partial_solution::add_output_data() {
  // @@protoc_insertion_point(field_add:sparse_net_library.Partial_solution.output_data)
  return output_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >&
Partial_solution::output_data() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Partial_solution.output_data)
  return output_data_;
}

// repeated uint32 actual_index = 10;
inline int Partial_solution::actual_index_size() const {
  return actual_index_.size();
}
inline void Partial_solution::clear_actual_index() {
  actual_index_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Partial_solution::actual_index(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.actual_index)
  return actual_index_.Get(index);
}
inline void Partial_solution::set_actual_index(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  actual_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Partial_solution.actual_index)
}
inline void Partial_solution::add_actual_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  actual_index_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Partial_solution.actual_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Partial_solution::actual_index() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Partial_solution.actual_index)
  return actual_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Partial_solution::mutable_actual_index() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Partial_solution.actual_index)
  return &actual_index_;
}

// repeated .sparse_net_library.transfer_functions neuron_transfer_functions = 11;
inline int Partial_solution::neuron_transfer_functions_size() const {
  return neuron_transfer_functions_.size();
}
inline void Partial_solution::clear_neuron_transfer_functions() {
  neuron_transfer_functions_.Clear();
}
inline ::sparse_net_library::transfer_functions Partial_solution::neuron_transfer_functions(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.neuron_transfer_functions)
  return static_cast< ::sparse_net_library::transfer_functions >(neuron_transfer_functions_.Get(index));
}
inline void Partial_solution::set_neuron_transfer_functions(int index, ::sparse_net_library::transfer_functions value) {
  neuron_transfer_functions_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Partial_solution.neuron_transfer_functions)
}
inline void Partial_solution::add_neuron_transfer_functions(::sparse_net_library::transfer_functions value) {
  neuron_transfer_functions_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Partial_solution.neuron_transfer_functions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Partial_solution::neuron_transfer_functions() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Partial_solution.neuron_transfer_functions)
  return neuron_transfer_functions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Partial_solution::mutable_neuron_transfer_functions() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Partial_solution.neuron_transfer_functions)
  return &neuron_transfer_functions_;
}

// repeated double memory_ratio_index = 12;
inline int Partial_solution::memory_ratio_index_size() const {
  return memory_ratio_index_.size();
}
inline void Partial_solution::clear_memory_ratio_index() {
  memory_ratio_index_.Clear();
}
inline double Partial_solution::memory_ratio_index(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.memory_ratio_index)
  return memory_ratio_index_.Get(index);
}
inline void Partial_solution::set_memory_ratio_index(int index, double value) {
  memory_ratio_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Partial_solution.memory_ratio_index)
}
inline void Partial_solution::add_memory_ratio_index(double value) {
  memory_ratio_index_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Partial_solution.memory_ratio_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Partial_solution::memory_ratio_index() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Partial_solution.memory_ratio_index)
  return memory_ratio_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Partial_solution::mutable_memory_ratio_index() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Partial_solution.memory_ratio_index)
  return &memory_ratio_index_;
}

// repeated double bias_index = 13;
inline int Partial_solution::bias_index_size() const {
  return bias_index_.size();
}
inline void Partial_solution::clear_bias_index() {
  bias_index_.Clear();
}
inline double Partial_solution::bias_index(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.bias_index)
  return bias_index_.Get(index);
}
inline void Partial_solution::set_bias_index(int index, double value) {
  bias_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Partial_solution.bias_index)
}
inline void Partial_solution::add_bias_index(double value) {
  bias_index_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Partial_solution.bias_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Partial_solution::bias_index() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Partial_solution.bias_index)
  return bias_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Partial_solution::mutable_bias_index() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Partial_solution.bias_index)
  return &bias_index_;
}

// repeated uint32 index_synapse_number = 14;
inline int Partial_solution::index_synapse_number_size() const {
  return index_synapse_number_.size();
}
inline void Partial_solution::clear_index_synapse_number() {
  index_synapse_number_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Partial_solution::index_synapse_number(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.index_synapse_number)
  return index_synapse_number_.Get(index);
}
inline void Partial_solution::set_index_synapse_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  index_synapse_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Partial_solution.index_synapse_number)
}
inline void Partial_solution::add_index_synapse_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  index_synapse_number_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Partial_solution.index_synapse_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Partial_solution::index_synapse_number() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Partial_solution.index_synapse_number)
  return index_synapse_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Partial_solution::mutable_index_synapse_number() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Partial_solution.index_synapse_number)
  return &index_synapse_number_;
}

// repeated uint32 weight_synapse_number = 15;
inline int Partial_solution::weight_synapse_number_size() const {
  return weight_synapse_number_.size();
}
inline void Partial_solution::clear_weight_synapse_number() {
  weight_synapse_number_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Partial_solution::weight_synapse_number(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.weight_synapse_number)
  return weight_synapse_number_.Get(index);
}
inline void Partial_solution::set_weight_synapse_number(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  weight_synapse_number_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Partial_solution.weight_synapse_number)
}
inline void Partial_solution::add_weight_synapse_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  weight_synapse_number_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Partial_solution.weight_synapse_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Partial_solution::weight_synapse_number() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Partial_solution.weight_synapse_number)
  return weight_synapse_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Partial_solution::mutable_weight_synapse_number() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Partial_solution.weight_synapse_number)
  return &weight_synapse_number_;
}

// repeated .sparse_net_library.Synapse_interval inside_indices = 20;
inline int Partial_solution::inside_indices_size() const {
  return inside_indices_.size();
}
inline ::sparse_net_library::Synapse_interval* Partial_solution::mutable_inside_indices(int index) {
  // @@protoc_insertion_point(field_mutable:sparse_net_library.Partial_solution.inside_indices)
  return inside_indices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >*
Partial_solution::mutable_inside_indices() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Partial_solution.inside_indices)
  return &inside_indices_;
}
inline const ::sparse_net_library::Synapse_interval& Partial_solution::inside_indices(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.inside_indices)
  return inside_indices_.Get(index);
}
inline ::sparse_net_library::Synapse_interval* Partial_solution::add_inside_indices() {
  // @@protoc_insertion_point(field_add:sparse_net_library.Partial_solution.inside_indices)
  return inside_indices_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >&
Partial_solution::inside_indices() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Partial_solution.inside_indices)
  return inside_indices_;
}

// repeated .sparse_net_library.Synapse_interval weight_indices = 30;
inline int Partial_solution::weight_indices_size() const {
  return weight_indices_.size();
}
inline ::sparse_net_library::Synapse_interval* Partial_solution::mutable_weight_indices(int index) {
  // @@protoc_insertion_point(field_mutable:sparse_net_library.Partial_solution.weight_indices)
  return weight_indices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >*
Partial_solution::mutable_weight_indices() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Partial_solution.weight_indices)
  return &weight_indices_;
}
inline const ::sparse_net_library::Synapse_interval& Partial_solution::weight_indices(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Partial_solution.weight_indices)
  return weight_indices_.Get(index);
}
inline ::sparse_net_library::Synapse_interval* Partial_solution::add_weight_indices() {
  // @@protoc_insertion_point(field_add:sparse_net_library.Partial_solution.weight_indices)
  return weight_indices_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Synapse_interval >&
Partial_solution::weight_indices() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Partial_solution.weight_indices)
  return weight_indices_;
}

// -------------------------------------------------------------------

// Solution

// uint32 neuron_number = 1;
inline void Solution::clear_neuron_number() {
  neuron_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Solution::neuron_number() const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Solution.neuron_number)
  return neuron_number_;
}
inline void Solution::set_neuron_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  neuron_number_ = value;
  // @@protoc_insertion_point(field_set:sparse_net_library.Solution.neuron_number)
}

// uint32 output_neuron_number = 2;
inline void Solution::clear_output_neuron_number() {
  output_neuron_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Solution::output_neuron_number() const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Solution.output_neuron_number)
  return output_neuron_number_;
}
inline void Solution::set_output_neuron_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  output_neuron_number_ = value;
  // @@protoc_insertion_point(field_set:sparse_net_library.Solution.output_neuron_number)
}

// repeated uint32 cols = 10;
inline int Solution::cols_size() const {
  return cols_.size();
}
inline void Solution::clear_cols() {
  cols_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Solution::cols(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Solution.cols)
  return cols_.Get(index);
}
inline void Solution::set_cols(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cols_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Solution.cols)
}
inline void Solution::add_cols(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cols_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Solution.cols)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Solution::cols() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Solution.cols)
  return cols_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Solution::mutable_cols() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Solution.cols)
  return &cols_;
}

// repeated .sparse_net_library.Partial_solution partial_solutions = 11;
inline int Solution::partial_solutions_size() const {
  return partial_solutions_.size();
}
inline void Solution::clear_partial_solutions() {
  partial_solutions_.Clear();
}
inline ::sparse_net_library::Partial_solution* Solution::mutable_partial_solutions(int index) {
  // @@protoc_insertion_point(field_mutable:sparse_net_library.Solution.partial_solutions)
  return partial_solutions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Partial_solution >*
Solution::mutable_partial_solutions() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Solution.partial_solutions)
  return &partial_solutions_;
}
inline const ::sparse_net_library::Partial_solution& Solution::partial_solutions(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Solution.partial_solutions)
  return partial_solutions_.Get(index);
}
inline ::sparse_net_library::Partial_solution* Solution::add_partial_solutions() {
  // @@protoc_insertion_point(field_add:sparse_net_library.Solution.partial_solutions)
  return partial_solutions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Partial_solution >&
Solution::partial_solutions() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Solution.partial_solutions)
  return partial_solutions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sparse_net_library

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_solution_2eproto
