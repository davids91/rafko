// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sparse_net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sparse_5fnet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sparse_5fnet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sparse_5fnet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sparse_5fnet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sparse_5fnet_2eproto;
namespace sparse_net_library {
class Neuron;
class NeuronDefaultTypeInternal;
extern NeuronDefaultTypeInternal _Neuron_default_instance_;
class SparseNet;
class SparseNetDefaultTypeInternal;
extern SparseNetDefaultTypeInternal _SparseNet_default_instance_;
}  // namespace sparse_net_library
PROTOBUF_NAMESPACE_OPEN
template<> ::sparse_net_library::Neuron* Arena::CreateMaybeMessage<::sparse_net_library::Neuron>(Arena*);
template<> ::sparse_net_library::SparseNet* Arena::CreateMaybeMessage<::sparse_net_library::SparseNet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sparse_net_library {

enum transfer_functions : int {
  TRANSFER_FUNCTION_UNKNOWN = 0,
  TRANSFER_FUNCTION_IDENTITY = 1,
  TRANSFER_FUNCTION_SIGMOID = 2,
  TRANSFER_FUNCTION_TANH = 3,
  TRANSFER_FUNCTION_ELU = 4,
  TRANSFER_FUNCTION_SELU = 5,
  TRANSFER_FUNCTION_RELU = 6,
  TRANSFER_FUNCTION_END = 512,
  transfer_functions_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  transfer_functions_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool transfer_functions_IsValid(int value);
constexpr transfer_functions transfer_functions_MIN = TRANSFER_FUNCTION_UNKNOWN;
constexpr transfer_functions transfer_functions_MAX = TRANSFER_FUNCTION_END;
constexpr int transfer_functions_ARRAYSIZE = transfer_functions_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* transfer_functions_descriptor();
template<typename T>
inline const std::string& transfer_functions_Name(T enum_t_value) {
  static_assert(::std::is_same<T, transfer_functions>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function transfer_functions_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    transfer_functions_descriptor(), enum_t_value);
}
inline bool transfer_functions_Parse(
    const std::string& name, transfer_functions* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<transfer_functions>(
    transfer_functions_descriptor(), name, value);
}
// ===================================================================

class Neuron :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sparse_net_library.Neuron) */ {
 public:
  Neuron();
  virtual ~Neuron();

  Neuron(const Neuron& from);
  Neuron(Neuron&& from) noexcept
    : Neuron() {
    *this = ::std::move(from);
  }

  inline Neuron& operator=(const Neuron& from) {
    CopyFrom(from);
    return *this;
  }
  inline Neuron& operator=(Neuron&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Neuron& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Neuron* internal_default_instance() {
    return reinterpret_cast<const Neuron*>(
               &_Neuron_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Neuron& a, Neuron& b) {
    a.Swap(&b);
  }
  inline void Swap(Neuron* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Neuron* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Neuron* New() const final {
    return CreateMaybeMessage<Neuron>(nullptr);
  }

  Neuron* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Neuron>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Neuron& from);
  void MergeFrom(const Neuron& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neuron* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sparse_net_library.Neuron";
  }
  protected:
  explicit Neuron(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sparse_5fnet_2eproto);
    return ::descriptor_table_sparse_5fnet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightIndexSizesFieldNumber = 4,
    kWeightIndexStartsFieldNumber = 5,
    kInputIndexSizesFieldNumber = 6,
    kInputIndexStartsFieldNumber = 7,
    kBiasIdxFieldNumber = 1,
    kMemoryRatioIdxFieldNumber = 2,
    kTransferFunctionIdxFieldNumber = 3,
  };
  // repeated uint32 weight_index_sizes = 4;
  int weight_index_sizes_size() const;
  void clear_weight_index_sizes();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_index_sizes(int index) const;
  void set_weight_index_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_weight_index_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      weight_index_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_weight_index_sizes();

  // repeated uint32 weight_index_starts = 5;
  int weight_index_starts_size() const;
  void clear_weight_index_starts();
  ::PROTOBUF_NAMESPACE_ID::uint32 weight_index_starts(int index) const;
  void set_weight_index_starts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_weight_index_starts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      weight_index_starts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_weight_index_starts();

  // repeated uint32 input_index_sizes = 6;
  int input_index_sizes_size() const;
  void clear_input_index_sizes();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_index_sizes(int index) const;
  void set_input_index_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_input_index_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      input_index_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_input_index_sizes();

  // repeated uint32 input_index_starts = 7;
  int input_index_starts_size() const;
  void clear_input_index_starts();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_index_starts(int index) const;
  void set_input_index_starts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_input_index_starts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      input_index_starts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_input_index_starts();

  // uint32 bias_idx = 1;
  void clear_bias_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 bias_idx() const;
  void set_bias_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 memory_ratio_idx = 2;
  void clear_memory_ratio_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 memory_ratio_idx() const;
  void set_memory_ratio_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .sparse_net_library.transfer_functions transfer_function_idx = 3;
  void clear_transfer_function_idx();
  ::sparse_net_library::transfer_functions transfer_function_idx() const;
  void set_transfer_function_idx(::sparse_net_library::transfer_functions value);

  // @@protoc_insertion_point(class_scope:sparse_net_library.Neuron)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > weight_index_sizes_;
  mutable std::atomic<int> _weight_index_sizes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > weight_index_starts_;
  mutable std::atomic<int> _weight_index_starts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > input_index_sizes_;
  mutable std::atomic<int> _input_index_sizes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > input_index_starts_;
  mutable std::atomic<int> _input_index_starts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bias_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 memory_ratio_idx_;
  int transfer_function_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sparse_5fnet_2eproto;
};
// -------------------------------------------------------------------

class SparseNet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sparse_net_library.SparseNet) */ {
 public:
  SparseNet();
  virtual ~SparseNet();

  SparseNet(const SparseNet& from);
  SparseNet(SparseNet&& from) noexcept
    : SparseNet() {
    *this = ::std::move(from);
  }

  inline SparseNet& operator=(const SparseNet& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseNet& operator=(SparseNet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SparseNet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparseNet* internal_default_instance() {
    return reinterpret_cast<const SparseNet*>(
               &_SparseNet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SparseNet& a, SparseNet& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseNet* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparseNet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseNet* New() const final {
    return CreateMaybeMessage<SparseNet>(nullptr);
  }

  SparseNet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseNet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SparseNet& from);
  void MergeFrom(const SparseNet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SparseNet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sparse_net_library.SparseNet";
  }
  protected:
  explicit SparseNet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sparse_5fnet_2eproto);
    return ::descriptor_table_sparse_5fnet_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeuronArrayFieldNumber = 4,
    kWeightTableFieldNumber = 5,
    kInputDataSizeFieldNumber = 1,
    kInputNeuronNumberFieldNumber = 2,
    kOutputNeuronNumberFieldNumber = 3,
  };
  // repeated .sparse_net_library.Neuron neuron_array = 4;
  int neuron_array_size() const;
  void clear_neuron_array();
  ::sparse_net_library::Neuron* mutable_neuron_array(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Neuron >*
      mutable_neuron_array();
  const ::sparse_net_library::Neuron& neuron_array(int index) const;
  ::sparse_net_library::Neuron* add_neuron_array();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Neuron >&
      neuron_array() const;

  // repeated double weight_table = 5;
  int weight_table_size() const;
  void clear_weight_table();
  double weight_table(int index) const;
  void set_weight_table(int index, double value);
  void add_weight_table(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      weight_table() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_weight_table();

  // uint32 input_data_size = 1;
  void clear_input_data_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_data_size() const;
  void set_input_data_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 input_neuron_number = 2;
  void clear_input_neuron_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 input_neuron_number() const;
  void set_input_neuron_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 output_neuron_number = 3;
  void clear_output_neuron_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 output_neuron_number() const;
  void set_output_neuron_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:sparse_net_library.SparseNet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Neuron > neuron_array_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > weight_table_;
  mutable std::atomic<int> _weight_table_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_data_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 input_neuron_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_neuron_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sparse_5fnet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Neuron

// uint32 bias_idx = 1;
inline void Neuron::clear_bias_idx() {
  bias_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Neuron::bias_idx() const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Neuron.bias_idx)
  return bias_idx_;
}
inline void Neuron::set_bias_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bias_idx_ = value;
  // @@protoc_insertion_point(field_set:sparse_net_library.Neuron.bias_idx)
}

// uint32 memory_ratio_idx = 2;
inline void Neuron::clear_memory_ratio_idx() {
  memory_ratio_idx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Neuron::memory_ratio_idx() const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Neuron.memory_ratio_idx)
  return memory_ratio_idx_;
}
inline void Neuron::set_memory_ratio_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  memory_ratio_idx_ = value;
  // @@protoc_insertion_point(field_set:sparse_net_library.Neuron.memory_ratio_idx)
}

// .sparse_net_library.transfer_functions transfer_function_idx = 3;
inline void Neuron::clear_transfer_function_idx() {
  transfer_function_idx_ = 0;
}
inline ::sparse_net_library::transfer_functions Neuron::transfer_function_idx() const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Neuron.transfer_function_idx)
  return static_cast< ::sparse_net_library::transfer_functions >(transfer_function_idx_);
}
inline void Neuron::set_transfer_function_idx(::sparse_net_library::transfer_functions value) {
  
  transfer_function_idx_ = value;
  // @@protoc_insertion_point(field_set:sparse_net_library.Neuron.transfer_function_idx)
}

// repeated uint32 weight_index_sizes = 4;
inline int Neuron::weight_index_sizes_size() const {
  return weight_index_sizes_.size();
}
inline void Neuron::clear_weight_index_sizes() {
  weight_index_sizes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Neuron::weight_index_sizes(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Neuron.weight_index_sizes)
  return weight_index_sizes_.Get(index);
}
inline void Neuron::set_weight_index_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  weight_index_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Neuron.weight_index_sizes)
}
inline void Neuron::add_weight_index_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  weight_index_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Neuron.weight_index_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Neuron::weight_index_sizes() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Neuron.weight_index_sizes)
  return weight_index_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Neuron::mutable_weight_index_sizes() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Neuron.weight_index_sizes)
  return &weight_index_sizes_;
}

// repeated uint32 weight_index_starts = 5;
inline int Neuron::weight_index_starts_size() const {
  return weight_index_starts_.size();
}
inline void Neuron::clear_weight_index_starts() {
  weight_index_starts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Neuron::weight_index_starts(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Neuron.weight_index_starts)
  return weight_index_starts_.Get(index);
}
inline void Neuron::set_weight_index_starts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  weight_index_starts_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Neuron.weight_index_starts)
}
inline void Neuron::add_weight_index_starts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  weight_index_starts_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Neuron.weight_index_starts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Neuron::weight_index_starts() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Neuron.weight_index_starts)
  return weight_index_starts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Neuron::mutable_weight_index_starts() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Neuron.weight_index_starts)
  return &weight_index_starts_;
}

// repeated uint32 input_index_sizes = 6;
inline int Neuron::input_index_sizes_size() const {
  return input_index_sizes_.size();
}
inline void Neuron::clear_input_index_sizes() {
  input_index_sizes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Neuron::input_index_sizes(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Neuron.input_index_sizes)
  return input_index_sizes_.Get(index);
}
inline void Neuron::set_input_index_sizes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  input_index_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Neuron.input_index_sizes)
}
inline void Neuron::add_input_index_sizes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  input_index_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Neuron.input_index_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Neuron::input_index_sizes() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Neuron.input_index_sizes)
  return input_index_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Neuron::mutable_input_index_sizes() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Neuron.input_index_sizes)
  return &input_index_sizes_;
}

// repeated uint32 input_index_starts = 7;
inline int Neuron::input_index_starts_size() const {
  return input_index_starts_.size();
}
inline void Neuron::clear_input_index_starts() {
  input_index_starts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Neuron::input_index_starts(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.Neuron.input_index_starts)
  return input_index_starts_.Get(index);
}
inline void Neuron::set_input_index_starts(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  input_index_starts_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.Neuron.input_index_starts)
}
inline void Neuron::add_input_index_starts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  input_index_starts_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.Neuron.input_index_starts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Neuron::input_index_starts() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.Neuron.input_index_starts)
  return input_index_starts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Neuron::mutable_input_index_starts() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.Neuron.input_index_starts)
  return &input_index_starts_;
}

// -------------------------------------------------------------------

// SparseNet

// uint32 input_data_size = 1;
inline void SparseNet::clear_input_data_size() {
  input_data_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseNet::input_data_size() const {
  // @@protoc_insertion_point(field_get:sparse_net_library.SparseNet.input_data_size)
  return input_data_size_;
}
inline void SparseNet::set_input_data_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  input_data_size_ = value;
  // @@protoc_insertion_point(field_set:sparse_net_library.SparseNet.input_data_size)
}

// uint32 input_neuron_number = 2;
inline void SparseNet::clear_input_neuron_number() {
  input_neuron_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseNet::input_neuron_number() const {
  // @@protoc_insertion_point(field_get:sparse_net_library.SparseNet.input_neuron_number)
  return input_neuron_number_;
}
inline void SparseNet::set_input_neuron_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  input_neuron_number_ = value;
  // @@protoc_insertion_point(field_set:sparse_net_library.SparseNet.input_neuron_number)
}

// uint32 output_neuron_number = 3;
inline void SparseNet::clear_output_neuron_number() {
  output_neuron_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SparseNet::output_neuron_number() const {
  // @@protoc_insertion_point(field_get:sparse_net_library.SparseNet.output_neuron_number)
  return output_neuron_number_;
}
inline void SparseNet::set_output_neuron_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  output_neuron_number_ = value;
  // @@protoc_insertion_point(field_set:sparse_net_library.SparseNet.output_neuron_number)
}

// repeated .sparse_net_library.Neuron neuron_array = 4;
inline int SparseNet::neuron_array_size() const {
  return neuron_array_.size();
}
inline void SparseNet::clear_neuron_array() {
  neuron_array_.Clear();
}
inline ::sparse_net_library::Neuron* SparseNet::mutable_neuron_array(int index) {
  // @@protoc_insertion_point(field_mutable:sparse_net_library.SparseNet.neuron_array)
  return neuron_array_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Neuron >*
SparseNet::mutable_neuron_array() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.SparseNet.neuron_array)
  return &neuron_array_;
}
inline const ::sparse_net_library::Neuron& SparseNet::neuron_array(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.SparseNet.neuron_array)
  return neuron_array_.Get(index);
}
inline ::sparse_net_library::Neuron* SparseNet::add_neuron_array() {
  // @@protoc_insertion_point(field_add:sparse_net_library.SparseNet.neuron_array)
  return neuron_array_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sparse_net_library::Neuron >&
SparseNet::neuron_array() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.SparseNet.neuron_array)
  return neuron_array_;
}

// repeated double weight_table = 5;
inline int SparseNet::weight_table_size() const {
  return weight_table_.size();
}
inline void SparseNet::clear_weight_table() {
  weight_table_.Clear();
}
inline double SparseNet::weight_table(int index) const {
  // @@protoc_insertion_point(field_get:sparse_net_library.SparseNet.weight_table)
  return weight_table_.Get(index);
}
inline void SparseNet::set_weight_table(int index, double value) {
  weight_table_.Set(index, value);
  // @@protoc_insertion_point(field_set:sparse_net_library.SparseNet.weight_table)
}
inline void SparseNet::add_weight_table(double value) {
  weight_table_.Add(value);
  // @@protoc_insertion_point(field_add:sparse_net_library.SparseNet.weight_table)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
SparseNet::weight_table() const {
  // @@protoc_insertion_point(field_list:sparse_net_library.SparseNet.weight_table)
  return weight_table_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
SparseNet::mutable_weight_table() {
  // @@protoc_insertion_point(field_mutable_list:sparse_net_library.SparseNet.weight_table)
  return &weight_table_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sparse_net_library

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sparse_net_library::transfer_functions> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sparse_net_library::transfer_functions>() {
  return ::sparse_net_library::transfer_functions_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sparse_5fnet_2eproto
