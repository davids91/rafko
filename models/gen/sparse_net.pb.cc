// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sparse_net.proto

#include "sparse_net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sparse_5fnet_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Neuron_sparse_5fnet_2eproto;
namespace sparse_net_library {
class NeuronDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Neuron> _instance;
} _Neuron_default_instance_;
class SparseNetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseNet> _instance;
} _SparseNet_default_instance_;
}  // namespace sparse_net_library
static void InitDefaultsscc_info_Neuron_sparse_5fnet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sparse_net_library::_Neuron_default_instance_;
    new (ptr) ::sparse_net_library::Neuron();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sparse_net_library::Neuron::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Neuron_sparse_5fnet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Neuron_sparse_5fnet_2eproto}, {}};

static void InitDefaultsscc_info_SparseNet_sparse_5fnet_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sparse_net_library::_SparseNet_default_instance_;
    new (ptr) ::sparse_net_library::SparseNet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sparse_net_library::SparseNet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparseNet_sparse_5fnet_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SparseNet_sparse_5fnet_2eproto}, {
      &scc_info_Neuron_sparse_5fnet_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sparse_5fnet_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sparse_5fnet_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sparse_5fnet_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sparse_5fnet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::Neuron, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::Neuron, bias_idx_),
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::Neuron, memory_ratio_idx_),
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::Neuron, transfer_function_idx_),
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::Neuron, weight_index_sizes_),
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::Neuron, weight_index_starts_),
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::Neuron, input_index_sizes_),
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::Neuron, input_index_starts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::SparseNet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::SparseNet, input_data_size_),
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::SparseNet, output_neuron_number_),
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::SparseNet, neuron_array_),
  PROTOBUF_FIELD_OFFSET(::sparse_net_library::SparseNet, weight_table_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sparse_net_library::Neuron)},
  { 12, -1, sizeof(::sparse_net_library::SparseNet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sparse_net_library::_Neuron_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sparse_net_library::_SparseNet_default_instance_),
};

const char descriptor_table_protodef_sparse_5fnet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020sparse_net.proto\022\022sparse_net_library\"\353"
  "\001\n\006Neuron\022\020\n\010bias_idx\030\001 \001(\r\022\030\n\020memory_ra"
  "tio_idx\030\002 \001(\r\022E\n\025transfer_function_idx\030\003"
  " \001(\0162&.sparse_net_library.transfer_funct"
  "ions\022\032\n\022weight_index_sizes\030\004 \003(\r\022\033\n\023weig"
  "ht_index_starts\030\005 \003(\021\022\031\n\021input_index_siz"
  "es\030\006 \003(\r\022\032\n\022input_index_starts\030\007 \003(\021\"\212\001\n"
  "\tSparseNet\022\027\n\017input_data_size\030\001 \001(\r\022\034\n\024o"
  "utput_neuron_number\030\003 \001(\r\0220\n\014neuron_arra"
  "y\030\004 \003(\0132\032.sparse_net_library.Neuron\022\024\n\014w"
  "eight_table\030\005 \003(\001*\375\001\n\022transfer_functions"
  "\022\035\n\031TRANSFER_FUNCTION_UNKNOWN\020\000\022\036\n\032TRANS"
  "FER_FUNCTION_IDENTITY\020\001\022\035\n\031TRANSFER_FUNC"
  "TION_SIGMOID\020\002\022\032\n\026TRANSFER_FUNCTION_TANH"
  "\020\003\022\031\n\025TRANSFER_FUNCTION_ELU\020\004\022\032\n\026TRANSFE"
  "R_FUNCTION_SELU\020\005\022\032\n\026TRANSFER_FUNCTION_R"
  "ELU\020\006\022\032\n\025TRANSFER_FUNCTION_END\020\200\004B\003\370\001\001b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sparse_5fnet_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sparse_5fnet_2eproto_sccs[2] = {
  &scc_info_Neuron_sparse_5fnet_2eproto.base,
  &scc_info_SparseNet_sparse_5fnet_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sparse_5fnet_2eproto_once;
static bool descriptor_table_sparse_5fnet_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sparse_5fnet_2eproto = {
  &descriptor_table_sparse_5fnet_2eproto_initialized, descriptor_table_protodef_sparse_5fnet_2eproto, "sparse_net.proto", 686,
  &descriptor_table_sparse_5fnet_2eproto_once, descriptor_table_sparse_5fnet_2eproto_sccs, descriptor_table_sparse_5fnet_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_sparse_5fnet_2eproto::offsets,
  file_level_metadata_sparse_5fnet_2eproto, 2, file_level_enum_descriptors_sparse_5fnet_2eproto, file_level_service_descriptors_sparse_5fnet_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sparse_5fnet_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sparse_5fnet_2eproto), true);
namespace sparse_net_library {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* transfer_functions_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sparse_5fnet_2eproto);
  return file_level_enum_descriptors_sparse_5fnet_2eproto[0];
}
bool transfer_functions_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 512:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Neuron::InitAsDefaultInstance() {
}
class Neuron::_Internal {
 public:
};

Neuron::Neuron()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sparse_net_library.Neuron)
}
Neuron::Neuron(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  weight_index_sizes_(arena),
  weight_index_starts_(arena),
  input_index_sizes_(arena),
  input_index_starts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sparse_net_library.Neuron)
}
Neuron::Neuron(const Neuron& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      weight_index_sizes_(from.weight_index_sizes_),
      weight_index_starts_(from.weight_index_starts_),
      input_index_sizes_(from.input_index_sizes_),
      input_index_starts_(from.input_index_starts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bias_idx_, &from.bias_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&transfer_function_idx_) -
    reinterpret_cast<char*>(&bias_idx_)) + sizeof(transfer_function_idx_));
  // @@protoc_insertion_point(copy_constructor:sparse_net_library.Neuron)
}

void Neuron::SharedCtor() {
  ::memset(&bias_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_function_idx_) -
      reinterpret_cast<char*>(&bias_idx_)) + sizeof(transfer_function_idx_));
}

Neuron::~Neuron() {
  // @@protoc_insertion_point(destructor:sparse_net_library.Neuron)
  SharedDtor();
}

void Neuron::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Neuron::ArenaDtor(void* object) {
  Neuron* _this = reinterpret_cast< Neuron* >(object);
  (void)_this;
}
void Neuron::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Neuron::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Neuron& Neuron::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Neuron_sparse_5fnet_2eproto.base);
  return *internal_default_instance();
}


void Neuron::Clear() {
// @@protoc_insertion_point(message_clear_start:sparse_net_library.Neuron)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weight_index_sizes_.Clear();
  weight_index_starts_.Clear();
  input_index_sizes_.Clear();
  input_index_starts_.Clear();
  ::memset(&bias_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transfer_function_idx_) -
      reinterpret_cast<char*>(&bias_idx_)) + sizeof(transfer_function_idx_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Neuron::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 bias_idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          bias_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 memory_ratio_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          memory_ratio_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sparse_net_library.transfer_functions transfer_function_idx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_transfer_function_idx(static_cast<::sparse_net_library::transfer_functions>(val));
        } else goto handle_unusual;
        continue;
      // repeated uint32 weight_index_sizes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_weight_index_sizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          add_weight_index_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 weight_index_starts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(mutable_weight_index_starts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          add_weight_index_starts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 input_index_sizes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_input_index_sizes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          add_input_index_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 input_index_starts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(mutable_input_index_starts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          add_input_index_starts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Neuron::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sparse_net_library.Neuron)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 bias_idx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bias_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 memory_ratio_idx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memory_ratio_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sparse_net_library.transfer_functions transfer_function_idx = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_transfer_function_idx(static_cast< ::sparse_net_library::transfer_functions >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 weight_index_sizes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_weight_index_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_weight_index_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 weight_index_starts = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_weight_index_starts())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 1, 42u, input, this->mutable_weight_index_starts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 input_index_sizes = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_input_index_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_input_index_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated sint32 input_index_starts = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_input_index_starts())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 1, 58u, input, this->mutable_input_index_starts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sparse_net_library.Neuron)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sparse_net_library.Neuron)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Neuron::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sparse_net_library.Neuron)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bias_idx = 1;
  if (this->bias_idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->bias_idx(), output);
  }

  // uint32 memory_ratio_idx = 2;
  if (this->memory_ratio_idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->memory_ratio_idx(), output);
  }

  // .sparse_net_library.transfer_functions transfer_function_idx = 3;
  if (this->transfer_function_idx() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->transfer_function_idx(), output);
  }

  // repeated uint32 weight_index_sizes = 4;
  if (this->weight_index_sizes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_weight_index_sizes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->weight_index_sizes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->weight_index_sizes(i), output);
  }

  // repeated sint32 weight_index_starts = 5;
  if (this->weight_index_starts_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_weight_index_starts_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->weight_index_starts_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32NoTag(
      this->weight_index_starts(i), output);
  }

  // repeated uint32 input_index_sizes = 6;
  if (this->input_index_sizes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_index_sizes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->input_index_sizes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->input_index_sizes(i), output);
  }

  // repeated sint32 input_index_starts = 7;
  if (this->input_index_starts_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_input_index_starts_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->input_index_starts_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32NoTag(
      this->input_index_starts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sparse_net_library.Neuron)
}

::PROTOBUF_NAMESPACE_ID::uint8* Neuron::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sparse_net_library.Neuron)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bias_idx = 1;
  if (this->bias_idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->bias_idx(), target);
  }

  // uint32 memory_ratio_idx = 2;
  if (this->memory_ratio_idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->memory_ratio_idx(), target);
  }

  // .sparse_net_library.transfer_functions transfer_function_idx = 3;
  if (this->transfer_function_idx() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->transfer_function_idx(), target);
  }

  // repeated uint32 weight_index_sizes = 4;
  if (this->weight_index_sizes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _weight_index_sizes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->weight_index_sizes_, target);
  }

  // repeated sint32 weight_index_starts = 5;
  if (this->weight_index_starts_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _weight_index_starts_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->weight_index_starts_, target);
  }

  // repeated uint32 input_index_sizes = 6;
  if (this->input_index_sizes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _input_index_sizes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->input_index_sizes_, target);
  }

  // repeated sint32 input_index_starts = 7;
  if (this->input_index_starts_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _input_index_starts_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteSInt32NoTagToArray(this->input_index_starts_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sparse_net_library.Neuron)
  return target;
}

size_t Neuron::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sparse_net_library.Neuron)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 weight_index_sizes = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->weight_index_sizes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weight_index_sizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 weight_index_starts = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->weight_index_starts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weight_index_starts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 input_index_sizes = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->input_index_sizes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_index_sizes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated sint32 input_index_starts = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->input_index_starts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _input_index_starts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 bias_idx = 1;
  if (this->bias_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->bias_idx());
  }

  // uint32 memory_ratio_idx = 2;
  if (this->memory_ratio_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->memory_ratio_idx());
  }

  // .sparse_net_library.transfer_functions transfer_function_idx = 3;
  if (this->transfer_function_idx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->transfer_function_idx());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Neuron::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sparse_net_library.Neuron)
  GOOGLE_DCHECK_NE(&from, this);
  const Neuron* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Neuron>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sparse_net_library.Neuron)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sparse_net_library.Neuron)
    MergeFrom(*source);
  }
}

void Neuron::MergeFrom(const Neuron& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sparse_net_library.Neuron)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weight_index_sizes_.MergeFrom(from.weight_index_sizes_);
  weight_index_starts_.MergeFrom(from.weight_index_starts_);
  input_index_sizes_.MergeFrom(from.input_index_sizes_);
  input_index_starts_.MergeFrom(from.input_index_starts_);
  if (from.bias_idx() != 0) {
    set_bias_idx(from.bias_idx());
  }
  if (from.memory_ratio_idx() != 0) {
    set_memory_ratio_idx(from.memory_ratio_idx());
  }
  if (from.transfer_function_idx() != 0) {
    set_transfer_function_idx(from.transfer_function_idx());
  }
}

void Neuron::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sparse_net_library.Neuron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neuron::CopyFrom(const Neuron& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sparse_net_library.Neuron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neuron::IsInitialized() const {
  return true;
}

void Neuron::InternalSwap(Neuron* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  weight_index_sizes_.InternalSwap(&other->weight_index_sizes_);
  weight_index_starts_.InternalSwap(&other->weight_index_starts_);
  input_index_sizes_.InternalSwap(&other->input_index_sizes_);
  input_index_starts_.InternalSwap(&other->input_index_starts_);
  swap(bias_idx_, other->bias_idx_);
  swap(memory_ratio_idx_, other->memory_ratio_idx_);
  swap(transfer_function_idx_, other->transfer_function_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Neuron::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SparseNet::InitAsDefaultInstance() {
}
class SparseNet::_Internal {
 public:
};

SparseNet::SparseNet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sparse_net_library.SparseNet)
}
SparseNet::SparseNet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  neuron_array_(arena),
  weight_table_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sparse_net_library.SparseNet)
}
SparseNet::SparseNet(const SparseNet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      neuron_array_(from.neuron_array_),
      weight_table_(from.weight_table_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&input_data_size_, &from.input_data_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&output_neuron_number_) -
    reinterpret_cast<char*>(&input_data_size_)) + sizeof(output_neuron_number_));
  // @@protoc_insertion_point(copy_constructor:sparse_net_library.SparseNet)
}

void SparseNet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SparseNet_sparse_5fnet_2eproto.base);
  ::memset(&input_data_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_neuron_number_) -
      reinterpret_cast<char*>(&input_data_size_)) + sizeof(output_neuron_number_));
}

SparseNet::~SparseNet() {
  // @@protoc_insertion_point(destructor:sparse_net_library.SparseNet)
  SharedDtor();
}

void SparseNet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void SparseNet::ArenaDtor(void* object) {
  SparseNet* _this = reinterpret_cast< SparseNet* >(object);
  (void)_this;
}
void SparseNet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SparseNet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SparseNet& SparseNet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SparseNet_sparse_5fnet_2eproto.base);
  return *internal_default_instance();
}


void SparseNet::Clear() {
// @@protoc_insertion_point(message_clear_start:sparse_net_library.SparseNet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neuron_array_.Clear();
  weight_table_.Clear();
  ::memset(&input_data_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&output_neuron_number_) -
      reinterpret_cast<char*>(&input_data_size_)) + sizeof(output_neuron_number_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SparseNet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 input_data_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          input_data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 output_neuron_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          output_neuron_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sparse_net_library.Neuron neuron_array = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_neuron_array(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated double weight_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_weight_table(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          add_weight_table(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SparseNet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sparse_net_library.SparseNet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 input_data_size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 output_neuron_number = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &output_neuron_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sparse_net_library.Neuron neuron_array = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_neuron_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double weight_table = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_weight_table())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_weight_table())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sparse_net_library.SparseNet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sparse_net_library.SparseNet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SparseNet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sparse_net_library.SparseNet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 input_data_size = 1;
  if (this->input_data_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->input_data_size(), output);
  }

  // uint32 output_neuron_number = 3;
  if (this->output_neuron_number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->output_neuron_number(), output);
  }

  // repeated .sparse_net_library.Neuron neuron_array = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neuron_array_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->neuron_array(static_cast<int>(i)),
      output);
  }

  // repeated double weight_table = 5;
  if (this->weight_table_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_weight_table_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->weight_table().data(), this->weight_table_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sparse_net_library.SparseNet)
}

::PROTOBUF_NAMESPACE_ID::uint8* SparseNet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sparse_net_library.SparseNet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 input_data_size = 1;
  if (this->input_data_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->input_data_size(), target);
  }

  // uint32 output_neuron_number = 3;
  if (this->output_neuron_number() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->output_neuron_number(), target);
  }

  // repeated .sparse_net_library.Neuron neuron_array = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->neuron_array_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->neuron_array(static_cast<int>(i)), target);
  }

  // repeated double weight_table = 5;
  if (this->weight_table_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _weight_table_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->weight_table_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sparse_net_library.SparseNet)
  return target;
}

size_t SparseNet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sparse_net_library.SparseNet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sparse_net_library.Neuron neuron_array = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->neuron_array_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->neuron_array(static_cast<int>(i)));
    }
  }

  // repeated double weight_table = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->weight_table_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weight_table_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 input_data_size = 1;
  if (this->input_data_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->input_data_size());
  }

  // uint32 output_neuron_number = 3;
  if (this->output_neuron_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->output_neuron_number());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseNet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sparse_net_library.SparseNet)
  GOOGLE_DCHECK_NE(&from, this);
  const SparseNet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SparseNet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sparse_net_library.SparseNet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sparse_net_library.SparseNet)
    MergeFrom(*source);
  }
}

void SparseNet::MergeFrom(const SparseNet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sparse_net_library.SparseNet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neuron_array_.MergeFrom(from.neuron_array_);
  weight_table_.MergeFrom(from.weight_table_);
  if (from.input_data_size() != 0) {
    set_input_data_size(from.input_data_size());
  }
  if (from.output_neuron_number() != 0) {
    set_output_neuron_number(from.output_neuron_number());
  }
}

void SparseNet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sparse_net_library.SparseNet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseNet::CopyFrom(const SparseNet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sparse_net_library.SparseNet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseNet::IsInitialized() const {
  return true;
}

void SparseNet::InternalSwap(SparseNet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&neuron_array_)->InternalSwap(CastToBase(&other->neuron_array_));
  weight_table_.InternalSwap(&other->weight_table_);
  swap(input_data_size_, other->input_data_size_);
  swap(output_neuron_number_, other->output_neuron_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SparseNet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sparse_net_library
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sparse_net_library::Neuron* Arena::CreateMaybeMessage< ::sparse_net_library::Neuron >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sparse_net_library::Neuron >(arena);
}
template<> PROTOBUF_NOINLINE ::sparse_net_library::SparseNet* Arena::CreateMaybeMessage< ::sparse_net_library::SparseNet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sparse_net_library::SparseNet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
